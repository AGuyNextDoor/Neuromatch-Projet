{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":416,"status":"ok","timestamp":1659077642767,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"7pFy0cC5QnSQ"},"outputs":[],"source":["import numpy as np\n","import pandas as pd"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":74958,"status":"ok","timestamp":1659077732263,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"jm1csCNyOr0P","outputId":"656d63e5-4995-4708-c955-018bacb00591"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":512,"status":"ok","timestamp":1659077738308,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"vRBunfryP29T"},"outputs":[],"source":["import sys\n","sys.path.append('/content/gdrive/MyDrive/Neuromatch Project/Colab Project')\n","\n","import myLib"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1659077738309,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"-vMpXvn4Qaeu"},"outputs":[],"source":["test_size = 0.2                    # Value between 0 and 1\n","version_1_or_2 = False             # True is version 1 with only channels as columns, Flase is version 2 with channels and time steps in columns\n","pca_reduction = True               # Are channels reduced by number of pca components?\n","data_processing = ''            # string describing the data procesing procedure before modelling, 'rms', 'derivative', 'raw'\n","trials_are_meaned = False          # Are the trials meaned?\n","num_of_principal_comp = 20         # If pca_reduction, choose how many principal components are kept    \n","frequency_range = (50, np.nan)     # Chooosing the frequencies kept\n","time_window = [-400, 1600]         # Choosing the time window around the stimulus\n","time_bin_size = 10                     # Size of the time bin\n","subject_list = [0, 1]                  # Subject number, has to be in array even if only one subject is wanted\n","experiment_list = [1, 2, 3]            # Experiment number, has to be in an array if only one subject is wanted"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1659077740192,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"GqmVFwwJQMbc","outputId":"5e0ee70b-11ca-4b0a-e9c8-0ca2b18f8c44"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'train_data_V2_PCA20_TimeBin10_Subject0-1_Experiment1-2-3_Time_window--400-1600_Freq-50-nan.csv'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}],"source":["train_file_name = myLib.dataset_naming(\"train_data\", version_1_or_2, test_size,data_processing, pca_reduction, num_of_principal_comp, frequency_range, time_window, time_bin_size, subject_list, experiment_list)\n","test_file_name = myLib.dataset_naming(\"test_data\", version_1_or_2, test_size,data_processing, pca_reduction, num_of_principal_comp, frequency_range, time_window, time_bin_size, subject_list, experiment_list)\n","train_file_name"]},{"cell_type":"markdown","metadata":{"id":"68687Rmen6eW"},"source":["train_data_V2_TimeBin10_Subject0-1_Experiment1-2-3_Time_window--400-1600_Freq-50-nan.csv\n","train_data_V2_TimeBin10_Subject0-1_Experiment1-2-3_Time_window--400-1600_Freq-50-nan.csv"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":2584,"status":"ok","timestamp":1659077744956,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"aPnutiPVOxWg"},"outputs":[],"source":["path = \"./gdrive/MyDrive/Neuromatch Project/Datasets/\"\n","train_df = pd.read_csv(path + train_file_name)\n","test_df = pd.read_csv(path + test_file_name)\n","\n","X_train = train_df.drop([\"target\"], axis = 1)\n","y_train = train_df[\"target\"]\n","\n","X_test = test_df.drop([\"target\"], axis = 1)\n","y_test = test_df[\"target\"]"]},{"cell_type":"markdown","metadata":{"id":"_dH3CUmISgpO"},"source":["## Models"]},{"cell_type":"markdown","metadata":{"id":"ax-xhmdFSmjn"},"source":["### Evaluation"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1659077744957,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"OjWMNr43SiSN"},"outputs":[],"source":["# Utility functions for Model Training and Testing\n","from sklearn.metrics import f1_score\n","from sklearn.metrics import confusion_matrix\n","\n","def precision(target, prediction):\n","  (TN, FP), (FN, TP) = confusion_matrix(target, prediction)\n","  return np.divide(TP,(TP + FP))\n","\n","def recall(target, prediction):\n","  (TN, FP), (FN, TP) = confusion_matrix(target, prediction)\n","  return np.divide(TP,(TP + FN))\n","\n","def F1(target, prediction):\n","  # pre = precision(target, prediction)\n","  # rec = recall(target, prediction)\n","\n","  # return 2*(np.divide((pre*rec),(pre+rec)))\n","\n","  return f1_score(target, prediction)\n","\n","def FP_ratio(target, prediction):\n","  (TN, FP), (FN, TP) = confusion_matrix(target, prediction)\n","  return FP/(FP + TN)\n","\n","def FN_ratio(target, prediction):\n","  (TN, FP), (FN, TP) = confusion_matrix(target, prediction)\n","  return FN/(FN + TP)\n","\n","def training_model(model, X_tr = X_train, y_tr = y_train):\n","\n","  print(\"training model :\", model)\n","  return model.fit(X_tr, y_tr)\n","\n","def evaluate_model(model, X_tr, y_tr, X_te, y_te, type_res=\"train\"):\n","\n","  print(\"--\"*10)\n","  print(\"Evaluating model :\", model)\n","\n","  train_prediction = model.predict(X_tr)\n","  test_prediction = model.predict(X_te)\n","\n","  # print(train_prediction)\n","  print(\"Train Confusion Matrix is : \\n\", confusion_matrix(y_tr, train_prediction))\n","  print(\"Test Confusion Matrix is : \\n\", confusion_matrix(y_te, test_prediction))\n","  print()\n","\n","  print(\"Train Mean Accuracy is : \", model.score(X_tr, y_tr))\n","  print(\"Test Mean Accuracy is : \", model.score(X_te, y_te))\n","  print()\n","\n","  print(\"Precision for training is : \", precision(y_tr, train_prediction))\n","  print(\"Precision for test is : \", precision(y_te, test_prediction))\n","  print()\n","\n","  print(\"Recall for training is : \", recall(y_tr, train_prediction))\n","  print(\"Recall for test is : \",recall(y_te, test_prediction))\n","  print()\n","\n","  print(\"F1_Score for training is : \", F1(y_tr, train_prediction))\n","  print(\"F1_Score for test is : \", F1(y_te, test_prediction))\n","  print(\"--\"*10)\n","\n","  if type_res == \"train\":\n","    return F1(y_tr, train_prediction)\n","\n","  else : \n","    return F1(y_te, test_prediction)"]},{"cell_type":"markdown","metadata":{"id":"MtCfIUFrSoKa"},"source":["### Installation"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7468,"status":"ok","timestamp":1659077753241,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"eCqFrduXSpGb","outputId":"1d3b314b-0865-43da-d6f4-976cb297c396"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: xgboost in /usr/local/lib/python3.7/dist-packages (0.90)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.7.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from xgboost) (1.21.6)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: hyperopt in /usr/local/lib/python3.7/dist-packages (0.1.2)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from hyperopt) (0.16.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.7.3)\n","Requirement already satisfied: pymongo in /usr/local/lib/python3.7/dist-packages (from hyperopt) (4.2.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from hyperopt) (4.64.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.15.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from hyperopt) (1.21.6)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (from hyperopt) (2.6.3)\n"]}],"source":["!pip install xgboost\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn import svm\n","import xgboost as xgb\n","\n","!pip install hyperopt\n","from hyperopt import STATUS_OK, Trials, fmin, hp, tpe\n","\n","random_seed = 2022"]},{"cell_type":"markdown","metadata":{"id":"Nsp2FWk-TE1S"},"source":["### SVM"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"5wKif-uGSt4E","outputId":"2d8a1296-fd4d-47a4-816f-da3c71de9c72"},"outputs":[{"name":"stdout","output_type":"stream","text":["{'C': 1.3835727263760622, 'gamma': 'auto', 'kernel': {'ktype': 'sigmoid'}}\n","-0.3448275862068966\n","{'C': 2.5354584224051053, 'gamma': 'scale', 'kernel': {'ktype': 'rbf'}}\n","-0.5714285714285714\n","{'C': 1.7440831029346227, 'gamma': 'scale', 'kernel': {'ktype': 'linear'}}\n","-0.5945945945945946\n","{'C': 0.2314399761888036, 'gamma': 'scale', 'kernel': {'ktype': 'linear'}}\n","-0.5945945945945946\n","{'C': 0.5974226660170814, 'gamma': 'scale', 'kernel': {'degree': 10.173390431532836, 'ktype': 'poly'}}\n","-0.0\n","{'C': 4.510400726464216, 'gamma': 'auto', 'kernel': {'ktype': 'sigmoid'}}\n","-0.3448275862068966\n","{'C': 0.25321686671103066, 'gamma': 'scale', 'kernel': {'degree': 16.30226417115165, 'ktype': 'poly'}}\n","-0.0\n","{'C': 1.549360604088523, 'gamma': 'auto', 'kernel': {'ktype': 'sigmoid'}}\n","-0.33333333333333337\n","{'C': 2.246557451609135, 'gamma': 'scale', 'kernel': {'ktype': 'sigmoid'}}\n","-0.27272727272727276\n","{'C': 2.92997429222294, 'gamma': 'auto', 'kernel': {'ktype': 'rbf'}}\n","-0.5185185185185185\n","{'C': 0.9256566614320788, 'gamma': 'auto', 'kernel': {'ktype': 'linear'}}\n","-0.5945945945945946\n","{'C': 0.5356023653225612, 'gamma': 'scale', 'kernel': {'ktype': 'rbf'}}\n","-0.0\n"," 24%|██▍       | 12/50 [00:10<00:28,  1.36it/s, best loss: -0.5945945945945946]"]}],"source":["execute = True\n","\n","if(execute) : \n","\n","  HP = {'kernel': hp.choice('svm_kernel', [\n","            {'ktype': 'linear'},\n","            {'ktype': 'poly', 'degree': hp.uniform('poly_degree', 8,20)},\n","            {'ktype': 'sigmoid'},\n","            {'ktype': 'rbf'},\n","            ]),\n","        'gamma': hp.choice('gamma', [\n","            'scale',\n","            'auto',\n","        ]),\n","        'C' : hp.lognormal('svm_C', 0, 1),\n","  }\n","\n","\n","  def objective(space):\n","\n","    if space[\"kernel\"]['ktype'] == 'poly':\n","      clf=svm.SVC(kernel=space[\"kernel\"]['ktype'], degree=int(space[\"kernel\"]['degree']), gamma=space[\"gamma\"], C=space[\"C\"], random_state=random_seed)\n","    else : \n","      clf=svm.SVC(kernel=space[\"kernel\"]['ktype'], gamma=space[\"gamma\"], C=space[\"C\"], random_state=random_seed)\n","\n","    # svm.SVC(kernel=\"linear\", C=C),\n","    # svm.LinearSVC(C=C, max_iter=10000),\n","    # svm.SVC(kernel=\"rbf\", gamma=0.7, C=C)\n","      \n","    evaluation = [( X_train, y_train), ( X_test, y_test)]\n","    \n","    fit_clf = clf.fit(X_train, y_train)\n","    prediction = fit_clf.predict(X_test)\n","    f1 = F1(y_test, prediction)\n","    # rec = recall(y_test, prediction)\n","    # print(rec)\n","\n","    print(space, -f1)\n","\n","    return {'loss': -f1, 'status': STATUS_OK }\n","\n","  trials = Trials()\n","\n","  best_hyperparams_svm = fmin(fn = objective,\n","                          space = HP,\n","                          algo = tpe.suggest,\n","                          max_evals = 50,\n","                          trials = trials)\n","  best_hyperparams_svm\n","# {'gamma': 1, 'svm_C': 14444.616009797139, 'svm_kernel': 2}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Sa137W_lqc_r"},"outputs":[],"source":["# best_hyperparams_svm\n","# 0.6875 {'gamma': 0, 'svm_C': 1.374891071920575, 'svm_kernel': 'linear'}"]},{"cell_type":"markdown","metadata":{"id":"z9Vl1YniTMCG"},"source":["### Adaboost"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1143836,"status":"ok","timestamp":1658996769400,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"vudj3XR8TOAC","outputId":"862aaa34-d2cb-45b1-b77e-2fc9cda6d5b8"},"outputs":[{"name":"stdout","output_type":"stream","text":["{'algorithm': 'SAMME', 'learning_rate': 0.9977900345831288, 'n_estimators': 193.40385197403168}\n","-0.6470588235294118\n","{'algorithm': 'SAMME', 'learning_rate': 0.7592923502340172, 'n_estimators': 303.13550326175306}\n","-0.7272727272727272\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.9708537345096176, 'n_estimators': 491.23942968644167}\n","-0.7272727272727272\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.27544486304379856, 'n_estimators': 249.79621797761038}\n","-0.7058823529411765\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.9353748205596231, 'n_estimators': 157.74288534392468}\n","-0.7272727272727272\n","{'algorithm': 'SAMME', 'learning_rate': 0.1544351824823489, 'n_estimators': 431.53144423881315}\n","-0.5806451612903226\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.6986614071307609, 'n_estimators': 154.04370051777573}\n","-0.7428571428571428\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.6883390985001768, 'n_estimators': 312.08766062895154}\n","-0.7647058823529411\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.8535996228779801, 'n_estimators': 220.81338960606635}\n","-0.7272727272727272\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.7403493991420758, 'n_estimators': 367.50896934167787}\n","-0.7647058823529411\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.1524542073179297, 'n_estimators': 324.991228307572}\n","-0.7058823529411765\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.9607224289872197, 'n_estimators': 463.15732475593023}\n","-0.6875000000000001\n","{'algorithm': 'SAMME', 'learning_rate': 0.31293696416429917, 'n_estimators': 102.04818434005367}\n","-0.5806451612903226\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.7483257633883104, 'n_estimators': 597.52599455535}\n","-0.7272727272727272\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.34907254337870075, 'n_estimators': 469.3458141170126}\n","-0.7058823529411765\n","{'algorithm': 'SAMME', 'learning_rate': 0.810979273942018, 'n_estimators': 530.3310618017282}\n","-0.7272727272727272\n","{'algorithm': 'SAMME', 'learning_rate': 0.1942034151045139, 'n_estimators': 183.28289937689618}\n","-0.6\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.20420767807032392, 'n_estimators': 542.5112745696056}\n","-0.7058823529411765\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.4089560808218725, 'n_estimators': 195.94944734947447}\n","-0.6875000000000001\n","{'algorithm': 'SAMME.R', 'learning_rate': 0.026304176888295783, 'n_estimators': 174.18469289054224}\n","-0.5\n","100%|██████████| 20/20 [1:19:53<00:00, 239.67s/it, best loss: -0.7647058823529411]\n"]}],"source":["execute = True\n","\n","if(execute) : \n","\n","  HP = {'n_estimators': hp.uniform('n_estimators', 100,600),\n","        'algorithm': hp.choice('algorithm', [\n","            'SAMME',\n","            'SAMME.R',\n","        ]),\n","        'learning_rate' : hp.uniform('learning_rate', 0, 1),\n","  }\n","\n","\n","  def objective(space):\n","    clf = AdaBoostClassifier(n_estimators=int(space[\"n_estimators\"]), algorithm=space[\"algorithm\"], learning_rate=space[\"learning_rate\"], random_state=random_seed)\n","      \n","    evaluation = [( X_train, y_train), ( X_test, y_test)]\n","    \n","    fit_clf = clf.fit(X_train, y_train)\n","    prediction = fit_clf.predict(X_test)\n","    f1 = F1(y_test, prediction)\n","    # rec = recall(y_test, prediction)\n","    # print(rec)\n","\n","\n","    print(space, -f1)\n","    return {'loss': -f1, 'status': STATUS_OK }\n","\n","  trials = Trials()\n","\n","  best_hyperparams_adaboost = fmin(fn = objective,\n","                          space = HP,\n","                          algo = tpe.suggest,\n","                          max_evals = 20,\n","                          trials = trials)\n","  \n","  best_hyperparams_adaboost"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":404,"status":"ok","timestamp":1658998800842,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"aLsekRXOaZ9h","outputId":"bb484d9a-28fd-4819-8923-bb2cd26bafa1"},"outputs":[{"data":{"text/plain":["{'algorithm': 1,\n"," 'learning_rate': 0.6883390985001768,\n"," 'n_estimators': 312.08766062895154}"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["best_hyperparams_adaboost\n","# 0.75 {'algorithm': 'SAMME', 'learning_rate': 0.06929231157670113, 'n_estimators': 750.9751514251807}\n","# 0.77 {'algorithm': 'SAMME','learning_rate': 0.12449726712239095,'n_estimators': 535.5257129321868}\n","# 0.799 {'algorithm': 'SAMME.R', 'learning_rate': 0.7304509381237088, 'n_estimators': 563.014256070336}"]},{"cell_type":"markdown","metadata":{"id":"V61nHU7vZXY9"},"source":["### XGBoost"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LxBunD8TTWEs"},"outputs":[],"source":["execute = False\n","\n","if(execute) : \n","\n","  HP = {'max_depth': hp.quniform(\"max_depth\", 6, 14, 1),\n","        'gamma': hp.uniform ('gamma', 2,10),\n","        'learning_rate': hp.quniform ('learning_rate', 0.2, 0.8, 0.01),\n","        # 'reg_alpha' : hp.quniform('reg_alpha', 40,180,10),\n","        'reg_lambda' : hp.uniform('reg_lambda', 2, 4),\n","        # 'colsample_bytree' : hp.uniform('colsample_bytree', 0.5,1),\n","        'min_child_weight' : hp.quniform('min_child_weight', 5, 20, 1),\n","        'n_estimators': hp.quniform(\"n_estimators\", 100, 300, 10),\n","        'seed': 0\n","  }\n","\n","  def objective(space):\n","    clf=xgb.XGBClassifier(\n","                    n_estimators =int(space['n_estimators']), max_depth = int(space['max_depth']), \n","                    gamma = space['gamma'], learning_rate=space[\"learning_rate\"],\n","                    reg_lambda = space['reg_lambda'],min_child_weight=int(space['min_child_weight']),\n","                    # colsample_bytree=int(space['colsample_bytree']), eval_metric='auc'\n","                    )\n","      \n","    evaluation = [( X_train, y_train), ( X_test, y_test)]\n","    \n","    fit_clf = clf.fit(X_train, y_train)\n","    prediction = fit_clf.predict(X_test)\n","    f1 = F1(y_test, prediction)\n","    # rec = recall(y_test, prediction)\n","    # print(rec)\n","\n","    print(space, -f1)\n","    return {'loss': -f1, 'status': STATUS_OK }\n","\n","  trials = Trials()\n","\n","  best_hyperparams_xgboost = fmin(fn = objective,\n","                          space = HP,\n","                          algo = tpe.suggest,\n","                          max_evals = 200,\n","                          trials = trials)\n","  \n","  best_hyperparams_xgboost"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YwhMY-dON8na"},"outputs":[],"source":["# best_hyperparams_xgboost\n","# {'gamma': 4.608207859691001,\n","#  'learning_rate': 0.26,\n","#  'max_depth': 11.0,\n","#  'min_child_weight': 13.0,\n","#  'n_estimators': 250.0,\n","#  'reg_lambda': 2.9885036400951703}"]},{"cell_type":"markdown","metadata":{"id":"w105gs0Bm7ah"},"source":["### Logistic Regression"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":147976,"status":"ok","timestamp":1659081393058,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"OxazeTBVm7I6","outputId":"5d7d1cea-6761-4761-b671-e12af9410874"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\r  0%|          | 0/20 [00:00<?, ?it/s, best loss: ?]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.46, 'penalty': 'l2', 'solver': 'liblinear'}\n","0.46153846153846156\n","  5%|▌         | 1/20 [00:02<00:40,  2.11s/it, best loss: -0.46153846153846156]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.62, 'penalty': 'l2', 'solver': 'saga'}\n","0.4705882352941177\n"," 10%|█         | 2/20 [01:40<17:32, 58.47s/it, best loss: -0.4705882352941177] "]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.41000000000000003, 'penalty': 'l2', 'solver': 'lbfgs'}\n","0.6111111111111112\n"," 15%|█▌        | 3/20 [01:40<09:05, 32.09s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.5700000000000001, 'penalty': 'l2', 'solver': 'newton-cg'}\n","0.6111111111111112\n"," 20%|██        | 4/20 [01:42<05:21, 20.10s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.84, 'penalty': 'l2', 'solver': 'lbfgs'}\n","0.6111111111111112\n"," 25%|██▌       | 5/20 [01:43<03:17, 13.13s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.64, 'penalty': 'l2', 'solver': 'sag'}\n","0.4800000000000001\n"," 30%|███       | 6/20 [02:57<07:54, 33.87s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.81, 'penalty': 'l2', 'solver': 'lbfgs'}\n","0.6111111111111112\n"," 35%|███▌      | 7/20 [02:58<04:59, 23.04s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.42, 'penalty': 'l2', 'solver': 'saga'}\n","0.4705882352941177\n"," 40%|████      | 8/20 [04:35<09:21, 46.82s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.49, 'penalty': 'l2', 'solver': 'liblinear'}\n","0.46153846153846156\n"," 45%|████▌     | 9/20 [04:37<06:01, 32.84s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.58, 'penalty': 'l2', 'solver': 'newton-cg'}\n","0.6111111111111112\n"," 50%|█████     | 10/20 [04:39<03:51, 23.18s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.41000000000000003, 'penalty': 'l2', 'solver': 'saga'}\n","0.4705882352941177\n"," 55%|█████▌    | 11/20 [06:16<06:51, 45.77s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["{'C': 0.52, 'penalty': 'l2', 'solver': 'saga'}\n","0.4705882352941177\n"," 60%|██████    | 12/20 [07:53<08:10, 61.29s/it, best loss: -0.6111111111111112]"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"output_type":"stream","name":"stdout","text":["{'C': 0.75, 'penalty': 'l2', 'solver': 'sag'}\n","0.4800000000000001\n"," 65%|██████▌   | 13/20 [09:06<07:35, 65.03s/it, best loss: -0.6111111111111112]"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"output_type":"stream","name":"stdout","text":["{'C': 0.63, 'penalty': 'l2', 'solver': 'saga'}\n","0.4705882352941177\n"," 70%|███████   | 14/20 [10:43<07:27, 74.58s/it, best loss: -0.6111111111111112]"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"output_type":"stream","name":"stdout","text":["{'C': 0.66, 'penalty': 'l2', 'solver': 'liblinear'}\n","0.46153846153846156\n"," 75%|███████▌  | 15/20 [10:45<04:23, 52.72s/it, best loss: -0.6111111111111112]"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"output_type":"stream","name":"stdout","text":["{'C': 1.0, 'penalty': 'l2', 'solver': 'liblinear'}\n","0.46153846153846156\n"," 80%|████████  | 16/20 [10:47<02:30, 37.51s/it, best loss: -0.6111111111111112]"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"output_type":"stream","name":"stdout","text":["{'C': 0.81, 'penalty': 'l2', 'solver': 'newton-cg'}\n","0.6111111111111112\n"," 85%|████████▌ | 17/20 [10:49<01:19, 26.61s/it, best loss: -0.6111111111111112]"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"output_type":"stream","name":"stdout","text":["{'C': 0.41000000000000003, 'penalty': 'l2', 'solver': 'lbfgs'}\n","0.6111111111111112\n"," 90%|█████████ | 18/20 [10:49<00:37, 18.80s/it, best loss: -0.6111111111111112]"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"output_type":"stream","name":"stdout","text":["{'C': 0.96, 'penalty': 'l2', 'solver': 'newton-cg'}\n","0.6111111111111112\n"," 95%|█████████▌| 19/20 [10:50<00:13, 13.50s/it, best loss: -0.6111111111111112]"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:1479: UserWarning: l1_ratio parameter is only used when penalty is 'elasticnet'. Got (penalty=l2)\n","  \"(penalty={})\".format(self.penalty)\n","\n"]},{"output_type":"stream","name":"stdout","text":["{'C': 0.48, 'penalty': 'l2', 'solver': 'newton-cg'}\n","0.6111111111111112\n","100%|██████████| 20/20 [10:52<00:00, 32.60s/it, best loss: -0.6111111111111112]\n"]}],"source":["execute = True\n","\n","if(execute) : \n","\n","  HP = {\n","        'penalty': hp.choice(\"penalty\", [\n","          # 'l1',\n","          'l2',\n","          # 'elasticnet',\n","        ]),\n","        # 'dual': hp.choice ('dual', [True, False]),\n","        'C': hp.quniform ('C', 0.4, 1, 0.01),\n","        # 'l1_ratio': hp.quniform ('l1_ratio',0, 1, 0.1),\n","        'solver': hp.choice(\"solver\", [\n","          'newton-cg',\n","          'lbfgs',\n","          'liblinear',\n","          'sag',\n","          'saga'\n","        ])\n","  }\n","\n","  def objective(space):\n","    clf=LogisticRegression(\n","                    penalty =space['penalty'], \n","                    C = space['C'], \n","                    solver = space['solver'], \n","                    # solver = 'saga', \n","                    max_iter = 5000,\n","                    l1_ratio = 0\n","                  )\n","      \n","    evaluation = [( X_train, y_train), ( X_test, y_test)]\n","    \n","    fit_clf = clf.fit(X_train, y_train)\n","    prediction = fit_clf.predict(X_test)\n","    f1 = F1(y_test, prediction)\n","    # rec = recall(y_test, prediction)\n","    # print(rec)\n","\n","\n","    print(space, f1)\n","    return {'loss': -f1, 'status': STATUS_OK }\n","\n","  trials = Trials()\n","\n","  best_hyperparams_logistic = fmin(fn = objective,\n","                          space = HP,\n","                          algo = tpe.suggest,\n","                          max_evals = 20,\n","                          trials = trials)\n","  \n","  best_hyperparams_logistic"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":484,"status":"ok","timestamp":1659080703106,"user":{"displayName":"Martin Vielvoye","userId":"03200028251631678513"},"user_tz":-120},"id":"I4j2fTJRrXM_","outputId":"17f5828b-2b6a-47d0-d05d-4fabfe2babdf"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'C': 0.71, 'penalty': 0}"]},"metadata":{},"execution_count":11}],"source":["best_hyperparams_logistic\n","# {'C': 0.67, 'solver': 0}\n","# 0.709 {'C': 0.93, 'penalty': 'l2'}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JSidV9d32TQL"},"outputs":[],"source":[""]}],"metadata":{"colab":{"collapsed_sections":[],"name":"Data Hyper Optimization","provenance":[],"authorship_tag":"ABX9TyMeCNTVaSQ0xK1Opc3FxT94"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}